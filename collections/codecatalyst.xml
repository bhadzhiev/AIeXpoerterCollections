<?xml version="1.0" encoding="utf-8"?>
<collection>
    <metadata>
        <name>codecatalyst</name>
        <description>AWS CodeCatalyst development and CI/CD automation templates</description>
        <system_prompt>{"role": "system", "content": "You are an AWS CodeCatalyst expert specializing in modern CI/CD
            pipelines, infrastructure as code, and development workflows. Focus on best practices, security, and
            efficient automation."}
        </system_prompt>
        <author/>
        <created_at>2025-07-20T18:29:50.345447</created_at>
        <updated_at>2025-07-21T14:00:00.000000</updated_at>
    </metadata>
    <templates>
        <template>
            <metadata>
                <name>project-info</name>
                <description>Comprehensive snapshot of Git repository health, structure, activity, and risks
                </description>
                <created_at>2025-07-21T14:00:00.000000</created_at>
                <updated_at>2025-07-21T14:00:00.000000</updated_at>
                <placeholder_generators>
                    <placeholder_generator language="bash"><![CDATA[
#!/bin/bash

# Simple git repository information extraction
# Compatible with most shells and environments

# Initialize variables with safe defaults
current_branch="unknown"
default_remote="unknown"
total_commits="0"
total_authors="0"
first_commit_date="unknown"
latest_commit_date="unknown"
top_authors_all="unknown"
commits_last_7d="0"
authors_last_7d="0"
top_authors_7d="unknown"
files_changed_7d="0"
lines_added_7d="0"
lines_deleted_7d="0"
most_active_files_7d="unknown"
total_tags="0"
last_tag="unknown"
merge_count="0"
avg_commits_per_day="0.00"
uncommitted_changes="0"
unstaged_files="0"
staged_files="0"
untracked_files="0"
local_branches="0"
remote_branches="0"
rebase_events="0"
git_dir_size="unknown"
git_object_count="0"
custom_git_hooks="0"

# Check if we're in a git repository
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then

    # Basic repository info
    current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
    default_remote=$(git remote get-url origin 2>/dev/null || echo "unknown")

    # Check if there are any commits
    if git rev-parse HEAD >/dev/null 2>&1; then
        total_commits=$(git rev-list --all --count 2>/dev/null || echo "0")
        total_authors=$(git shortlog -sne 2>/dev/null | wc -l | tr -d ' ' || echo "0")
        first_commit_date=$(git log --reverse --date=short --pretty=format:'%ad' 2>/dev/null | head -1 || echo "unknown")
        latest_commit_date=$(git log -1 --date=short --pretty=format:'%ad' 2>/dev/null || echo "unknown")

        # Top authors
        top_authors_all=$(git shortlog -s -n 2>/dev/null | awk '{for (i=2; i<=NF; i++) printf $i " "; print ""}' | paste -s -d ',' - | sed 's/,$//' || echo "unknown")

        # Recent activity
        commits_last_7d=$(git log --since='7 days ago' --oneline 2>/dev/null | wc -l | tr -d ' ' || echo "0")
        authors_last_7d=$(git log --since='7 days ago' --pretty=format:'%an' 2>/dev/null | sort -u | wc -l | tr -d ' ' || echo "0")
        top_authors_7d=$(git log --since='7 days ago' --pretty=format:'%an' 2>/dev/null | sort | uniq -c | sort -nr | awk '{for (i=2; i<=NF; i++) printf $i " "; print ""}' | paste -s -d ',' - | sed 's/,$//' || echo "unknown")

        # File activity
        files_changed_7d=$(git log --since='7 days ago' --name-only --pretty=format: 2>/dev/null | grep -v '^$' | sort -u | wc -l | tr -d ' ' || echo "0")
        lines_added_7d=$(git log --since='7 days ago' --numstat 2>/dev/null | awk '{if ($1 ~ /^[0-9]+$/) add+=$1} END {print add+0}' || echo "0")
        lines_deleted_7d=$(git log --since='7 days ago' --numstat 2>/dev/null | awk '{if ($2 ~ /^[0-9]+$/) del+=$2} END {print del+0}' || echo "0")
        most_active_files_7d=$(git log --since='7 days ago' --name-only --pretty=format: 2>/dev/null | grep -v '^$' | sort | uniq -c | sort -nr | awk '{print $2}' | head -5 | paste -s -d ',' - || echo "unknown")

        # Tags and merges
        total_tags=$(git tag 2>/dev/null | wc -l | tr -d ' ' || echo "0")
        last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "unknown")
        merge_count=$(git log --merges --oneline 2>/dev/null | wc -l | tr -d ' ' || echo "0")

        # Average commits per day
        first_commit_ts=$(git log --reverse --pretty=format:'%ct' 2>/dev/null | head -1 || echo "")
        if [ -n "$first_commit_ts" ] && [ "$first_commit_ts" -gt 0 ] 2>/dev/null; then
            now_ts=$(date +%s)
            days=$(( (now_ts - first_commit_ts) / 86400 ))
            if [ $days -gt 0 ]; then
                avg_commits_per_day=$(awk "BEGIN {printf \"%.2f\", $total_commits / $days}")
            else
                avg_commits_per_day="$total_commits"
            fi
        fi
    fi

    # Working directory state
    uncommitted_changes=$(git status --porcelain 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    unstaged_files=$(git diff --name-only 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    staged_files=$(git diff --cached --name-only 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    untracked_files=$(git ls-files --others --exclude-standard 2>/dev/null | wc -l | tr -d ' ' || echo "0")

    # Branches
    local_branches=$(git branch 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    remote_branches=$(git branch -r 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    rebase_events=$(grep rebase .git/logs/HEAD 2>/dev/null | wc -l | tr -d ' ' || echo "0")

    # Repository size
    git_dir=$(git rev-parse --git-dir 2>/dev/null)
    if [ -n "$git_dir" ]; then
        git_dir_size=$(du -sh "$git_dir" 2>/dev/null | cut -f1 || echo "unknown")
        git_object_count=$(find "$git_dir/objects" -type f 2>/dev/null | wc -l | tr -d ' ' || echo "0")
        custom_git_hooks=$(find "$git_dir/hooks" -type f ! -name '*.sample' 2>/dev/null | wc -l | tr -d ' ' || echo "0")
    fi
fi

# Output all variables
echo "current_branch=$current_branch"
echo "default_remote=$default_remote"
echo "total_commits=$total_commits"
echo "total_authors=$total_authors"
echo "first_commit_date=$first_commit_date"
echo "latest_commit_date=$latest_commit_date"
echo "top_authors_all=$top_authors_all"
echo "commits_last_7d=$commits_last_7d"
echo "authors_last_7d=$authors_last_7d"
echo "top_authors_7d=$top_authors_7d"
echo "files_changed_7d=$files_changed_7d"
echo "lines_added_7d=$lines_added_7d"
echo "lines_deleted_7d=$lines_deleted_7d"
echo "most_active_files_7d=$most_active_files_7d"
echo "total_tags=$total_tags"
echo "last_tag=$last_tag"
echo "merge_count=$merge_count"
echo "avg_commits_per_day=$avg_commits_per_day"
echo "uncommitted_changes=$uncommitted_changes"
echo "unstaged_files=$unstaged_files"
echo "staged_files=$staged_files"
echo "untracked_files=$untracked_files"
echo "local_branches=$local_branches"
echo "remote_branches=$remote_branches"
echo "rebase_events=$rebase_events"
echo "git_dir_size=$git_dir_size"
echo "git_object_count=$git_object_count"
echo "custom_git_hooks=$custom_git_hooks"
                    ]]></placeholder_generator>
                </placeholder_generators>
            </metadata>
            <content><![CDATA[
## Project Report
** Project Name **
**Date:** `$(date +%Y-%m-%d)`

## ðŸ§¾ General Repository Info

| Field                | Value               |
|----------------------|---------------------|
| Branch               | {current_branch}    |
| Remote               | {default_remote}    |
| First Commit Date    | {first_commit_date} |
| Latest Commit Date   | {latest_commit_date}|
| Total Commits        | {total_commits}     |
| Total Authors        | {total_authors}     |
| Total Tags           | {total_tags}        |
| Last Tag             | {last_tag}          |
| Local Branches       | {local_branches}    |
| Remote Branches      | {remote_branches}   |
| Merge Commits        | {merge_count}       |
| Rebase Events        | {rebase_events}     |
| Git Folder Size      | {git_dir_size}      |
| Git Object Count     | {git_object_count}  |
| Custom Git Hooks     | {custom_git_hooks}  |

---

## ðŸ“ˆ Derived Lifetime Metrics

| Metric                        | Formula                                                       | Result |
|------------------------------|----------------------------------------------------------------|--------|
| Commits per Author           | {total_commits} Ã· {total_authors}                             |        |
| Commits per Tag              | {total_commits} Ã· {total_tags}                                |        |
| Branches per Author          | ({local_branches} + {remote_branches}) Ã· {total_authors}      |        |
| Merge Commit Ratio           | {merge_count} Ã· {total_commits}                               |        |
| Rebase Commit Ratio          | {rebase_events} Ã· {total_commits}                             |        |
| Repo Age (days)              | days_between({first_commit_date}, {latest_commit_date})       |        |
| Tags per Year                | {total_tags} Ã· (repo_age_days Ã· 365)                          |        |
| Git Objects per Commit       | {git_object_count} Ã· {total_commits}                          |        |
| Average Tags per Commit      | {total_tags} Ã· {total_commits}                                |        |
| Branch Proliferation Index   | ({local_branches} + {remote_branches}) Ã· ({merge_count} + {rebase_events}) | |
| Git Bloat Ratio              | {git_dir_size} Ã· {total_commits}                              |        |

---

## ðŸ“Š Recent 7-Day Activity

| Metric             | Value                   |
|--------------------|-------------------------|
| Commits            | {commits_last_7d}       |
| Authors            | {authors_last_7d}       |
| Top Authors        | {top_authors_7d}        |
| Files Changed      | {files_changed_7d}      |
| Lines Added        | {lines_added_7d}        |
| Lines Deleted      | {lines_deleted_7d}      |
| Most Active Files  | {most_active_files_7d}  |

---

## ðŸ“‰ Derived Recent Metrics (7 Days)

| Metric                         | Formula                                                      | Result |
|--------------------------------|---------------------------------------------------------------|--------|
| Commit Velocity                | {commits_last_7d} Ã· 7                                        |        |
| Author Participation Rate      | {authors_last_7d} Ã· {total_authors}                          |        |
| Churn Ratio                    | {lines_deleted_7d} Ã· {lines_added_7d}                        |        |
| Change Density                 | ({lines_added_7d} + {lines_deleted_7d}) Ã· {files_changed_7d} |        |
| Merge vs Rebase Ratio          | {merge_count} Ã· ({merge_count} + {rebase_events})            |        |

---

## ðŸ§¼ Git Working Tree Status

| Metric              | Value               |
|---------------------|---------------------|
| Uncommitted Changes | {uncommitted_changes} |
| Staged Files        | {staged_files}        |
| Unstaged Files      | {unstaged_files}      |
| Untracked Files     | {untracked_files}     |

---

## ðŸ§® Calculation Hints

- Use days_between({first_commit_date}, {latest_commit_date}) to get repo age in days.
- If {git_dir_size} is in human-readable units (e.g. 1.2M, 480K), convert to float MB before division.
- Never guess if input is missing, zero, or unknown â€” just leave the "Result" cell empty.

---

## ðŸ§  Analyst Instructions

Once all placeholders in `{}` are populated:

1. Summarize project activity and health.
2. Identify key findings: low participation, merge-only workflow, high churn, excessive .git size.
3. Recommend 1â€“3 actions to improve based only on real metrics â€” no assumptions.
4. Use bullets or short paragraphs. Stay objective.

---
]]></content>
        </template>
    </templates>
</collection>